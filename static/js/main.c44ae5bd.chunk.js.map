{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","value","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","edit","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","console","log","updatedTodos","removedArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LA2DeA,MAzDf,SAAkBC,GAChB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACRF,EAASG,QAAQC,WAGnB,IAAMC,EAAe,SAACC,GACpBP,EAASO,EAAEC,OAAOC,QAGdC,EAAe,SAACH,GACpBA,EAAEI,iBACFd,EAAMe,SAAS,CACbC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMlB,IAERC,EAAS,KAGX,OACE,sBAAMY,SAAUF,EAAcQ,UAAU,YAAxC,SACGrB,EAAMsB,KACL,qCACE,uBACEC,YAAY,mBACZX,MAAOV,EACPsB,SAAUf,EACVgB,KAAK,OACLC,IAAKtB,EACLiB,UAAU,oBAEZ,wBAAQM,QAASd,EAAcQ,UAAU,mBAAzC,uBAKF,qCACE,uBACEE,YAAY,aACZX,MAAOV,EACPsB,SAAUf,EACVgB,KAAK,OACLJ,UAAU,aACVK,IAAKtB,IAEP,wBAAQuB,QAASd,EAAcQ,UAAU,cAAzC,4BCNKO,MAzCf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAC/C,EAAwB/B,mBAAS,CAC/Be,GAAI,KACJJ,MAAO,KAFT,mBAAOU,EAAP,KAAaW,EAAb,KAaA,OAAIX,EAAKN,GACA,cAAC,EAAD,CAAUM,KAAMA,EAAMP,SATV,SAACH,GACpBoB,EAAWV,EAAKN,GAAIJ,GACpBqB,EAAQ,CACNjB,GAAI,KACJJ,MAAO,QAQJiB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACf,sBACEf,UAAWc,EAAKE,WAAa,oBAAsB,WADrD,UAIE,qBAAmBV,QAAS,kBAAMG,EAAaK,EAAKnB,KAApD,SACGmB,EAAKf,MADEe,EAAKnB,IAGf,gCACE,wBAAQK,UAAU,gBAAgBM,QAAS,kBAAMI,EAAWI,EAAKnB,KAAjE,oBAGA,wBACEK,UAAU,cACVM,QAAS,kBAAMM,EAAQ,CAAEjB,GAAImB,EAAKnB,GAAIJ,MAAOuB,EAAKf,QAFpD,yBATGgB,OCiCIE,MArDf,WACE,MAA0BrC,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcU,EAAd,KAuCA,OACE,qCACE,cAAC,EAAD,CAAUxB,SAvCE,SAACoB,GAAU,IAAD,EACxB,GAAKA,EAAKf,OAAQ,QAAQoB,KAAKL,EAAKf,MAApC,CAGA,IAAMqB,EAAQ,CAAIN,GAAJ,mBAAaN,IAE3BU,EAASE,IAET,EAAAC,SAAQC,IAAR,SAAYR,GAAZ,mBAAqBN,SAgCnB,cAAC,EAAD,CACEA,MAAOA,EACPC,aA/Be,SAACd,GACpB,IAAI4B,EAAef,EAAMK,KAAI,SAACC,GAI5B,OAHIA,EAAKnB,KAAOA,IACdmB,EAAKE,YAAcF,EAAKE,YAEnBF,KAETI,EAASK,IAyBLb,WAZa,SAACf,GAClB,IAAM6B,EAAa,YAAIhB,GAAOiB,QAAO,SAACX,GAAD,OAAUA,EAAKnB,KAAOA,KAE3DuB,EAASM,IAULb,WAvBa,SAACe,EAAQC,GACrBA,EAAS5B,OAAQ,QAAQoB,KAAKQ,EAAS5B,OAI5CmB,GAAS,SAACU,GAAD,OACPA,EAAKf,KAAI,SAACgB,GAAD,OAAWA,EAAKlC,KAAO+B,EAASC,EAAWE,eCtB3CC,MATf,WACE,OACE,sBAAK9B,UAAU,WAAf,UACE,oBAAIA,UAAU,SAAd,sBACA,cAAC,EAAD,QCHN+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c44ae5bd.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction TodoForm(props) {\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 10000),\r\n      text: input,\r\n    });\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"todo-form\">\r\n      {props.edit ? (\r\n        <>\r\n          <input\r\n            placeholder=\"Update your item\"\r\n            value={input}\r\n            onChange={handleChange}\r\n            name=\"text\"\r\n            ref={inputRef}\r\n            className=\"todo-input edit\"\r\n          />\r\n          <button onClick={handleSubmit} className=\"todo-button edit\">\r\n            Update\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            placeholder=\"Add a todo\"\r\n            value={input}\r\n            onChange={handleChange}\r\n            name=\"text\"\r\n            className=\"todo-input\"\r\n            ref={inputRef}\r\n          />\r\n          <button onClick={handleSubmit} className=\"todo-button\">\r\n            Add todo\r\n          </button>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: \"\",\r\n  });\r\n\r\n  const submitUpdate = (value) => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: \"\",\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\r\n      key={index}\r\n    >\r\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n        {todo.text}\r\n      </div>\r\n      <div>\r\n        <button className=\"button-remove\" onClick={() => removeTodo(todo.id)}>\r\n          Delete\r\n        </button>\r\n        <button\r\n          className=\"button-edit\"\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n        >\r\n          Update\r\n        </button>\r\n      </div>\r\n    </div>\r\n  ));\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState } from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  const addTodo = (todo) => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;\r\n    }\r\n    const newTodos = [todo, ...todos];\r\n\r\n    setTodos(newTodos);\r\n\r\n    console.log(todo, ...todos);\r\n  };\r\n\r\n  const completeTodo = (id) => {\r\n    let updatedTodos = todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  const updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n\r\n    setTodos((prev) =>\r\n      prev.map((item) => (item.id === todoId ? newValue : item))\r\n    );\r\n  };\r\n\r\n  const removeTodo = (id) => {\r\n    const removedArr = [...todos].filter((todo) => todo.id !== id);\r\n\r\n    setTodos(removedArr);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TodoForm onSubmit={addTodo} />\r\n      <Todo\r\n        todos={todos}\r\n        completeTodo={completeTodo}\r\n        removeTodo={removeTodo}\r\n        updateTodo={updateTodo}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import \"./App.css\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <h1 className=\"header\">Todo App</h1>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}